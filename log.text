erfan@erfan-ASUS-TUF-Dash-F15-FX517ZM-FX517ZM ~/D/e/task4 (master)> terraform init

Initializing the backend...
Initializing provider plugins...
- Finding kreuzwerker/docker versions matching "~> 2.15"...
- Installing kreuzwerker/docker v2.25.0...
- Installed kreuzwerker/docker v2.25.0 (self-signed, key ID BD080C4571C6104C)
Partner and community providers are signed by their developers.
If you'd like to know more about provider signing, you can read about it here:
https://developer.hashicorp.com/terraform/cli/plugins/signing
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

----------------------------------------------------------------------------------------------------------------------------------------------------

erfan@erfan-ASUS-TUF-Dash-F15-FX517ZM-FX517ZM ~/D/e/task4 (master)> terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.python_alpine_container will be created
  + resource "docker_container" "python_alpine_container" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = [
          + "python3",
          + "-m",
          + "http.server",
          + "8000",
        ]
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + gateway                                     = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ip_address                                  = (known after apply)
      + ip_prefix_length                            = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "tf-python-alpine-container"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "always"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + healthcheck (known after apply)

      + labels (known after apply)

      + ports {
          + external = 8000
          + internal = 8000
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.python_alpine_image will be created
  + resource "docker_image" "python_alpine_image" {
      + id           = (known after apply)
      + image_id     = (known after apply)
      + keep_locally = true
      + latest       = (known after apply)
      + name         = "python:alpine"
      + output       = (known after apply)
      + repo_digest  = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply"
now.

----------------------------------------------------------------------------------------------------------------------------------------------------

erfan@erfan-ASUS-TUF-Dash-F15-FX517ZM-FX517ZM ~/D/e/task4 (master)> terraform apply 

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.python_alpine_container will be created
  + resource "docker_container" "python_alpine_container" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = [
          + "python3",
          + "-m",
          + "http.server",
          + "8000",
        ]
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + gateway                                     = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ip_address                                  = (known after apply)
      + ip_prefix_length                            = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "tf-python-alpine-container"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "always"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + healthcheck (known after apply)

      + labels (known after apply)

      + ports {
          + external = 8000
          + internal = 8000
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.python_alpine_image will be created
  + resource "docker_image" "python_alpine_image" {
      + id           = (known after apply)
      + image_id     = (known after apply)
      + keep_locally = true
      + latest       = (known after apply)
      + name         = "python:alpine"
      + output       = (known after apply)
      + repo_digest  = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_image.python_alpine_image: Creating...
docker_image.python_alpine_image: Still creating... [00m10s elapsed]
docker_image.python_alpine_image: Still creating... [00m20s elapsed]
docker_image.python_alpine_image: Creation complete after 23s [id=sha256:24ef78ff5ffe3f0b75661012741566f58f76e8109513be875a237d0a7b19b073python:alpine]
docker_container.python_alpine_container: Creating...
docker_container.python_alpine_container: Creation complete after 0s [id=7252a40cbefe44232e37788990181eacee542cb306c5670b5d891cd842124202]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

erfan@erfan-ASUS-TUF-Dash-F15-FX517ZM-FX517ZM ~/D/e/task4 (master)> terraform state list

docker_container.python_alpine_container
docker_image.python_alpine_image

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

erfan@erfan-ASUS-TUF-Dash-F15-FX517ZM-FX517ZM ~/D/e/task4 (master) [1]> docker ps

CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                    NAMES
7252a40cbefe   24ef78ff5ffe   "python3 -m http.ser…"   3 minutes ago   Up 3 minutes   0.0.0.0:8000->8000/tcp   tf-python-alpine-container